openapi: 3.0.1
info:
  title: Virtual platform Beacon API
  x-beaconVersion: v2.0
  description: EJPRD virtual platform data record APIs
  contact:
    email: admin@cafevariome.org
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: v0.2
servers:
- url: https://rdnexusdev.molgeniscloud.org/cv2/BeaconAPI/
  description: Development server
paths:
  /info:
    get:
      summary: "Get information regarding this beacon."
      tags:
      - Informational Endpoints
      responses:
        200:
          $ref: '#/components/schemas/InfoResponse'
  /filtering_terms:
    get:
      summary: "Get the valid filtering terms to be used in querying/handled by this beacon."
      tags:
      - Informational Endpoints
      responses:
        200:
          $ref: '#/components/schemas/FilteringTermsResponse'
  /map:
    get:
      summary: "Get the list of endpoints included in this beacon i.e., individuals."
      tags:
      - Informational Endpoints
      responses:
        200:
          $ref: '#/components/schemas/MapResponse'
  /service-info:
    get:
      summary: "Get information about the beacon using GA4GH ServiceInfo format."
      tags:
      - Informational Endpoints
      responses:
        200:
          $ref: '#/components/schemas/ServiceInfoResponse'
  /configuration:
    get:
      summary: "Get the configuration of this beacon."
      tags:
      - Informational Endpoints
      responses:
        200:
          $ref: '#/components/schemas/ConfigurationResponse'
  /entry_types:
    get:
      summary: "Get the list of beacon entry types."
      tags:
      - Informational Endpoints
      responses:
        200:
          $ref: '#/components/schemas/EntryTypesResponse'
  /individuals:
    post:
      summary: "Request to retrive count of individuals from a data source (i.e. patients)"
      tags:
      - Query Endpoints
      operationId: individuals_request
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IndividualRequest'
        required: true
      responses:
        200:
          $ref: '#/components/schemas/IndividualResponse'
        400:
          description: "Input data malformed"
          content: {}
        403:
          description: "The data source does not allow this API call"
          content: {}
      security:
      - apiAuth: []
components:
  schemas:
    IndividualRequest:
      required:
      - meta
      - query
      type: object
      properties:
        meta: 
          $ref: '#/components/schemas/MetaContent'
        query:
          $ref: '#/components/schemas/RequestQuery'
      description: "Request to return individuals count for given CDEs input parameters"
    RequestQuery:
      type: object
      properties:
        filters:
          $ref: '#/components/schemas/RequestFilter'
      description: "Input of the query"
    RequestFilter:
      required:
      - id
      type: array
      items:
        anyOf:
        - $ref: '#/components/schemas/AlphanumericRequestFilter'
        - $ref: '#/components/schemas/OntologyRequestArrayFilter'
    AlphanumericRequestFilter:
      required:
      - id
      - operator
      - value
      type: object
      properties:
        id:
          type: string
          description: >
                  Concept ID of CDEs. 
                    Allowed terms:
                     * `NCIT_C28421` - Sex
                     * `data_2295` - Causative Gene(s)
                     * `NCIT_C83164` - Age this year
                     * `NCIT_C124353` - Symptom Onset
                     * `NCIT_C156420` - Age at diagnosis
                     * `Available Materials` - Available Materials
          example: "NCIT_C28421"
        operator:
          type: string
          description: "This is a advance filter option to include comparison operators in the query."
          example: "="
        value:
          type: string
          description: >
              The actual values of the CDE. Allowed values:
                * For `NCIT_C28421`(Sex): 
                  * `NCIT_C16576`, (Female)
                  * `NCIT_C20197`, (Male)
                  * `NCIT_C124294`, (Undetermined)
                  * `NCIT_C17998` (Unknown)
                * For `data_2295`(Causative Gene) - Any HGNC Gene symbol
                * For `NCIT_C83164`(Age this year) - Any birth year as an integer
                * For `NCIT_C124353`(Symptom Onset) - Any integer
                * For `NCIT_C156420`(Age at diagnosis) - Any integer
          example: "NCIT_C16576"
      description: "Query parameters to filter individuals based on CDEs."
    OntologyRequestArrayFilter:
      required:
      - id
      type: object
      properties:
        id:
          anyOf:
          - type: string
          - type: array
          example: "Orphanet_558 or [Orphanet_558,Orphanet_773,Orphanet_12345]"
          description: >
                    Concept ID of CDEs. 
                      Allowed values:
                      * For Disease or Disorder: A single value or an array of orphanet terms. e.g. Orphanet_558 or [Orphanet_558, Orphanet_773]
                      * For Phenotype: A single value or an array of HPO terms. e.g. HP_0001251 or [HP_0001251, HP_0012250]
    InfoResponse:
      required:
      - meta
      - response
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/MetaContent'
        response:
          $ref: '#/components/schemas/InfoResponseContent'
      description: |
        Respond with information regarding this Beacon.
    FilteringTermsResponse:
      required:
      - meta
      - response
      properties:
        meta:
          $ref: '#/components/schemas/MetaContent'
        response:
          $ref: '#/components/schemas/FilterTermsResponseContent'
    FilterTermsResponseContent:
      required:
      - filteringTerms
      properties:
        filteringTerms:
          $ref: '#/components/schemas/FilterTermsResponse'
    FilterTermsResponse:
      description: |
        List of filtering terms for querying this Beacon.
      required: 
      - id
      - type
      type: object
      properties:
        id:
          type: string
          description: |
            The field id in the case of numeric or alphanumeric fields, or the term id in the case of ontology or custom terms. CURIE syntax in the case of an ontology term.
          example: NCIT_C28421
        type: 
          type: string
          description: |
            Either "custom", "alphanumeric" or ontology/terminology full name.
          example: alphanumeric or ontology or custom
        label:
          type: string
          description: |
            This would be the "preferred Label" in the case of an ontology term.
          example: Symptom Onset
    ServiceInfoResponse:
      description: |
        Respond with the Service Info of this Beacon.
    MapResponse:
      description: |
        Respond with the list of available query endpoints in this Beacon.
    EntryTypesResponse:
      required:
      - meta
      - response
      type: object
      properties: 
        meta:
          $ref: '#/components/schemas/MetaContent'
        response:
          $ref: '#/components/schemas/ETResponseContent'
      description: |
        Respond with the entry types available  in this Beacon Implementation.
    ConfigurationResponse:
      description: |
        Respond with this Beacon's configuration information.
    MetaContent:
      description: |
        Information about the response that could be relevant for the Beacon client in order to interpret the results.
      required: 
      - apiVersion
      - beaconId
      - receivedRequestSummary
      - returnedSchemas
      type: object
      properties: 
        apiVersion:
          type: string
          description: |
            Version of the API.
          example: v2.0
        beaconId:
          type: string
          description: |
            Identifier of the beacon, as defined in Beacon, in reverse domain name notation.
          example: BeaconAPI.cv2.rdnexusdev.molgeniscloud.org
        returnedSchemas:
          type: object
          description: |
            Set of schemas to be used in the response to a request.
          properties:
            entityType:
              type: string
            schema:
              type: string
    IndividualsMetaResponseContent:
      description: |
        Information about the response that could be relevant for the Beacon client in order to interpret the results.
      required: 
      - apiVersion
      - beaconId
      - receivedRequestSummary
      - returnedGranularity
      - returnedSchemas
      type: object
      properties: 
        apiVersion:
          type: string
          description: |
            Version of the API.
          example: v2.0
        beaconId:
          type: string
          description: |
            Identifier of the beacon, as defined in Beacon, in reverse domain name notation.
          example: BeaconAPI.cv2.rdnexusdev.molgeniscloud.org
        receivedRequestSummary:
          required:
          - apiVersion
          - requestedGranularity
          - requestedSchemas
          type: object
          description: |
            Section of the response that summarize the request with the following fields received as its been interpreted by the Beacon server. This could also just return the complete Beacon request made by the user.
          properties: 
            apiVersion:
              type: string
            filters:
              type: object
              description: |
                Filters as submitted in the request.
              $ref: '#/components/schemas/RequestFilter'
            requestedGranularity: 
              type: string
              example: boolean, count, aggregated, record
              default: count
            requestedSchemas:
              type: object
              description: |
                Set of schemas to be used in the response to a request.
              properties:
                entityType:
                  type: string
                schema:
                  type: string
        returnedGranularity: 
              type: string
              example: boolean, count, aggregated, record
              default: count
        returnedSchemas:
          type: object
          description: |
            Set of schemas to be used in the response to a request.
          properties:
            entityType:
              type: string
            schema:
              type: string
    InfoResponseContent:
      description: |
        Metadata describing a Beacon instance.
      required:
      - apiVersion
      - environment
      - id
      - name
      - organisation
      properties:
        apiVersion:
          type: string
          description: |
            Version of the API provided by the Beacon. 
          example: v2.0
        environment:
          type: string
          description: |
            Environment the service is running in. Use this to distinguish between production, development and testing/staging deployments. Allowed: prod, test, dev, staging
          example: dev
        id:
          type: string
          description: |
            Unique identifier of the Beacon. Use reverse domain name notation.
        name:
          type: string
          description: |
            Name of the Beacon. 
        organisation:
          type: object
          description: |
            Organization owning the Beacon.
          required:
          - id
          - name
          properties: 
            id:
              type: string
              description: |
                Unique identifier of the organization.
            name:
              type: string
              description: |
                Name of the organization.
    ETResponseContent:
      required: 
      - entryTypes
      type: object
      properties:
        entryTypes:
          required:
          - Individuals
          type: object
          description: |
            List of entry types. 
          properties:
            Individuals:
              description: |
                Definition of an element or entry type including the Beacon v2 required and suggested attributes. This schema purpose is to describe each type of entities included in this beacon, hence Beacon clients could have some metadata about such entities.
              required: 
              - defaultSchema
              - id
              - name
              - ontologyTermForThisType
              - partOfSpecification
              type: object
              properties: 
                defaultSchema:
                  description: |
                    Definition of an annotated URL address or a file reference.
                  required:
                    - id
                    - name
                    - referenceToSchemaDefinition
                  properties:
                    id:
                      type: string
                      description: |
                        A (unique) identifier of the element.
                      example: Individuals
                    name:
                      type: string
                      description: |
                        A distinctive name for the element.
                      example: Individuals
                    referenceToSchemaDefinition:
                      type: string
                      description: |
                        Conforming Schema of the element.
                      example: https://raw.githubusercontent.com/ga4gh-beacon/beacon-v2-Models/main/BEACON-V2-draft4-Model/individuals/defaultSchema.json
                id:
                  description: |
                    A unique identifier of the element.
                  type: string
                  example: Individuals
                name: 
                  description: |
                    A distinctive name for the element.
                  type: string
                  example: Individuals
                ontologyTermForThisType: 
                  description: |
                    Definition of an ontology term.
                  type: object
                  required:
                  - id
                  properties: 
                    id: 
                      description: |
                        A CURIE identifier as `id` for ontology term.
                      example: NCIT:C25190
                      type: string
                partOfSpecification:
                  description: |
                    This label is to group together entry types that are part of the same specification.
                  type: string
                  example: Beacon v2.0
      description: |
        Respond with a list of entry types conforming to Beacon v2 spec.
    IndividualResponse:
      description: |
        Response of a query over individuals counts.
      required:
      - meta
      - responseSummary
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/IndividualsMetaResponseContent'
        responseSummary:
          $ref: '#/components/schemas/IndividualResponseContent'
        info:
          description: | 
            Beacon only responds with this info object if there are any unsupported filters in the query.
          $ref: '#/components/schemas/WarningResponse'
    WarningResponse:
      description: |
        Any unsupported filters go here.
      required: 
      - warnings
      properties:
        warnings:
          type: object
          description: |
            Respond with a list of unsupported filter(s).
          example: NCIT_C16612
    IndividualResponseContent:
      required:
      - exists
      - numTotalResults
      type: object
      properties:
        exists:
          type: boolean
          description: |
            Indicator of whether any individual was observed in the
            data source for the given query with CDEs parameter. This should be non-null, unless there was an error, in which case `error` has to be non-null.
        numTotalResults:
          type: integer
      description: |
        Response of the query indicating if the query yield any results. If the query is successful then the count will be returned as a response.
  securitySchemes:
    apiAuth:
      type: apiKey
      in: header
      name: auth-key
