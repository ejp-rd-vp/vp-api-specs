openapi: 3.0.1
info:
  title: Virtual platform Beacon API
  x-beaconVersion: v2.0
  description: EJPRD virtual platform data record APIs
  contact:
    email: admin@cafevariome.org
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: v4.0
servers:
  - url: https://rdnexusdev.molgeniscloud.org/cv2/BeaconAPI/
    description: Development server
paths:
  /info:
    get:
      summary: "Get information regarding this beacon."
      tags:
        - Informational Endpoints
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InfoResponse"
  /filtering_terms:
    get:
      summary: "Get the valid filtering terms to be used in querying/handled by this beacon."
      tags:
        - Informational Endpoints
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FilteringTermsResponse"
  /map:
    get:
      summary: "Information about the response that could be relevant for the Beacon client in order to interpret the results"
      tags:
        - Informational Endpoints
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MapResponse"
  /service-info:
    get:
      summary: "Get information about the beacon using GA4GH ServiceInfo format."
      tags:
        - Informational Endpoints
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Service"
  /configuration:
    get:
      summary: "Get the configuration of this beacon."
      tags:
        - Informational Endpoints
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConfigurationResponse"
  /entry_types:
    get:
      summary: "Get the list of beacon entry types."
      tags:
        - Informational Endpoints
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConfigurationEntryTypesResponse"
  /individuals:
    post:
      summary: "Request to retrieve count of individuals from a data source (i.e. patients)."
      tags:
        - Query Endpoints
      operationId: individuals_request
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IndividualRequest"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IndividualResponse"
        "400":
          description: "Input data malformed"
          content: {}
        "403":
          description: "The data source does not allow this API call"
          content: {}
      security:
        - apiAuth: []
  /biosamples:
    post:
      summary: "Request to retrive count of biosamples from a data source."
      tags:
        - Query Endpoints
      operationId: biosamples_request
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BiosampleRequest"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                  $ref: "#/components/schemas/IndividualResponse"
        "400":
          description: "Input data malformed"
          content: {}
        "403":
          description: "The data source does not allow this API call"
          content: {}
      security:
        - apiAuth: []
  /catalogs:
    post:
      summary: "Request to retrive record(s) of resource(s) within a catalog/biobank/registry."
      tags:
        - Query Endpoints
      operationId: catalogs_request
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CatalogRequest"
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CatalogResponse"
        "400":
          description: "Input data malformed"
          content: {}
        "403":
          description: "The data source does not allow this API call"
          content: {}
      security:
        - apiAuth: []
components:
  schemas:
    IndividualRequest:
      required:
        - meta
        - query
      type: object
      properties:
        meta:
          $ref: "#/components/schemas/MetaContent"
        query:
          $ref: "#/components/schemas/IndividualRequestQuery"
      description: "Request to return individuals count for given CDEs as filters"
    BiosampleRequest:
      required:
        - meta
        - query
      type: object
      properties:
        meta:
          $ref: "#/components/schemas/MetaContent"
        query:
          $ref: "#/components/schemas/BiosampleRequestQuery"
      description: "Request to return individuals count for given CDEs as filters"
    CatalogRequest:
      required:
        - meta
        - query
      type: object
      properties:
        meta:
          $ref: "#/components/schemas/MetaContent"
        query:
          $ref: "#/components/schemas/CatalogRequestQuery"
      description: "Request to return resources for given CDEs as filters"
    IndividualRequestQuery:
      type: object
      properties:
        filters:
          $ref: "#/components/schemas/IndividualRequestFilter"
      description: "Input of the query"
    IndividualRequestFilter:
      type: array
      items:
        anyOf:
          - $ref: "#/components/schemas/IndividualAlphanumericRequestFilter"
          - $ref: "#/components/schemas/IndividualOntologyRequestArrayFilter"
    IndividualAlphanumericRequestFilter:
      required:
        - id
        - operator
        - value
      type: object
      properties:
        id:
          type: string
          description: >
            Concept ID of CDEs. 
              Allowed terms:
               * `ncit:C28421` - Sex
               * `edam:data_2295` - Causative Gene(s)
               * `ncit:C83164` - Age this year
               * `ncit:C124353` - Symptom Onset
               * `ncit:C156420` - Age at diagnosis
          example: "ncit:C28421"
        operator:
          type: string
          description: |
            This is an advance filter option to include comparison operators in the query. 
              * For `alphanumeric filter`, only `'='` is allowed. 
              * For `numeric filter`, `'=,>,>=,<,<='` are allowed.
          example: "="
        value:
          anyOf:
            - $ref: "#/components/schemas/IndividualStringValue"
            - $ref: "#/components/schemas/IndividualArrayValues"
      description: "Query parameters to filter individuals based on CDEs."
    IndividualStringValue:
      type: string
      example: '"ncit:C17998"'
      description: |
        The actual value of the CDE in string format. Allowed values:
          * For `ncit:C28421`(Sex): 
            * `ncit:C16576`, (Female)
            * `ncit:C20197`, (Male)
            * `ncit:C124294`, (Undetermined)
            * `ncit:C17998` (Unknown)
              * Ex: \"ncit:C16576\"
          * For `edam:data_2295`(Causative Gene): 
            * Any HGNC Gene symbol or an array of HGNC Symbols. 
              * Ex: \"FOXRED1\"
          * For `ncit:C83164`(Age this year): 
            * Any age as an integer
              * Ex: 13
          * For `ncit:C124353`(Symptom Onset): 
            * Any integer
              * Ex: 5
          * For `ncit:C156420`(Age at diagnosis):
            * Any integer
              * Ex: 8
    IndividualArrayValues:
      type: array
      items:
        type: string
      example: '["ncit:C16576","ncit:C20197"]'
      description: |
        An array of allowed CDE value(s) in string format.
    IndividualOntologyRequestArrayFilter:
      required:
        - id
      type: object
      properties:
        id:
          anyOf:
            - type: string
            - type: array
              items:
                type: string
              description: "Array of string orpha ids."
          example: '"ordo:Orphanet_558" or ["ordo:Orphanet_558","ordo:Orphanet_773","ordo:Orphanet_12345"]'
          description: |
            Concept ID of CDEs using Orpha ontology format. 
              Allowed values:
              * For `Disease or Disorder`: A single value or an array of orphanet terms. e.g. \"ordo:Orphanet_558\" or [\"ordo:Orphanet_558\", \"ordo:Orphanet_773\"]
    CatalogRequestQuery:
      type: object
      properties:
        filters:
          $ref: "#/components/schemas/CatalogRequestFilter"
      description: "Input of the query"
    CatalogRequestFilter:
      type: array
      items:
        anyOf:
          - $ref: "#/components/schemas/CatalogAlphanumericRequestFilter"
          - $ref: "#/components/schemas/CatalogOntologyRequestArrayFilter"
    CatalogAlphanumericRequestFilter:
      required:
        - id
        - operator
        - value
      type: object
      properties:
        id:
          type: string
          description: >
            Concept ID of Resource Metadata Schema. 
              Allowed terms:
               * `dct:identifier` => `ID`
               * `dct:title` => `Name`
               * `dct:description` => `Description`
               * `rdf:type` => `Resource Types`
               * `dct:spatial` => `Country`
          example: "resourceTypes"
        operator:
          type: string
          description: "This is an advanced filter option to compare filter IDs with filter values using '=' operator in the query."
          example: "="
        value:
          anyOf:
            - $ref: "#/components/schemas/CatalogStringValue"
            - $ref: "#/components/schemas/CatalogArrayValues"
          description: "Query parameters to filter individuals based on CDEs."
    CatalogStringValue:
      type: string
      example: "ejprd:PatientRegistry"
      description: |
        The actual value of the Resource Metadata Schema property for resources in string format. Allowed values:
          * For `dct:identifier`: any identifier of the resource as a string.
          * For `dct:title`: name of the resource as a string.
          * For `dct:description`: description of the resource as a string.
            * Note that you can also use wildcards. Ex: %genome comparison% returns list of records with description matching to genome comparison.
          * For `rdf:type`: any one of the following string values are allowed - 
            * ejprd:Biobank, 
            * ejprd:PatientRegistry,
            * ejptd:Guideline
            * dcat:Dataset
          * For `dct:spatial`: ISO 3166-1 alpha-2 format string (e.g. IT, FR, NL)
    CatalogArrayValues:
      type: array
      items:
        type: string
      example: "[ejprd:Biobank, ejprd:PatientRegistry]"
      description: |
        An array of value taken from the allowed values for the filter
    CatalogOntologyRequestArrayFilter:
      required:
        - id
      type: object
      properties:
        id:
          anyOf:
            - type: string
            - type: array
              items:
                type: string
              description: "Array of string orpha ids."
          example: '"ordo:Orphanet_558" or ["ordo:Orphanet_558","ordo:Orphanet_773","ordo:Orphanet_12345"]'
          description: |
            Ontology term for the specific Metadata Schema term.
              * For `Disease or Disorder`: A single value or an array of orphanet terms. e.g. \"ordo:Orphanet_558\" or [\"ordo:Orphanet_558\", \"ordo:Orphanet_773\"]
              * For `Phenotype`: a single value or an array of HPO terms
    BiosampleRequestQuery:
      type: object
      properties:
        filters:
          $ref: "#/components/schemas/BiosampleRequestFilter"
      description: "Input of the query"
    BiosampleRequestFilter:
      type: array
      items:
        anyOf:
          - $ref: "#/components/schemas/BiosampleAlphanumericRequestFilter"
          - $ref: "#/components/schemas/BiosampleOntologyRequestArrayFilter"
    BiosampleAlphanumericRequestFilter:
      required:
        - id
        - operator
        - value
      type: object
      properties:
        id:
          type: string
          description: >
            Concept ID for biosamples
              Allowed terms:
               * `ncit:C28421` - Sex
               * `ncit:C83164` - Year of birth
               * `ncit:C156420` - Age at diagnosis
               * `ncit:C70713` - Biospecimen type
          example: "ncit:C70713"
        operator:
          type: string
          description: "This is an advanced filter option to compare filter IDs with filter values using '=' operator in the query."
          example: "="
        value:
          anyOf:
            - $ref: "#/components/schemas/BiosampleStringValue"
            - $ref: "#/components/schemas/BiosampleArrayValues"
          description: "Query parameters to filter individuals based on CDEs."
    BiosampleStringValue:
      type: string
      description: |
        The actual value of the CDE in string format. Allowed values:
          * For `ncit:C28421`(Sex): 
            * `ncit:C16576`, (Female)
            * `ncit:C20197`, (Male)
            * `ncit:C124294`, (Undetermined)
            * `ncit:C17998` (Unknown)
              * Ex: \"ncit:C16576\"
          * For `ncit:C83164`(Year of birth): 
            * Any age as an integer
              * Ex: 13
          * For `ncit:C156420`(Age at diagnosis):
            * Any integer
              * Ex: 8
          * For ncit:C70713 (Biospecimen type):
            * obi:0000655 (blood specimen)
            * obi:0002512 (bone marrow)
            * OBIB:0000036 (buffy coat)
            * cl:"200"0001 (peripheral blood mononuclear cell)
            * obi:0100016 (blood plasma specime)
            * obi:0100017 (blood serum)
            * uberon:0007795 (ascites fluid)
            * obi:0002502 (cerebrospinal fluid)
            * obi:0002507 (saliva)
            * obi:0002503 (feces)
            * obi:0000651 (urine)
            * obi:0002599 (swab)
            * obi:"200"0009 (bodily fluid specimen)
            * obi:1"200"000 (FFPE specimen)
            * obi:0000922 (frozen specimen)
            * obi:0001472 (specimen with known storage state)
            * obi:0001051 (DNA extract)
            * obi:0000880 (RNA extract)
            * obi:0001479 (specimen from organism)
    BiosampleArrayValues:
      type: array
      items:
        type: string
      example: '["obi:0000655", "obi:0001051"]'
      description: |
        An array of possible string values for the specific filter
    BiosampleOntologyRequestArrayFilter:
      required:
        - id
      type: object
      properties:
        id:
          anyOf:
            - type: string
            - type: array
              items:
                type: string
              description: "Array of string orpha ids."
          example: '"ordo:Orphanet_558" or ["ordo:Orphanet_558","ordo:Orphanet_773","ordo:Orphanet_12345"]'
          description: |
            Concept ID of Biosamples term using Orpha ontology format. 
              Allowed values:
              * For `Disease or Disorder`: A single value or an array of orphanet terms. e.g. \"ordo:Orphanet_558\" or [\"ordo:Orphanet_558\", \"ordo:Orphanet_773\"]
    InfoResponse:
      required:
        - meta
        - response
      type: object
      properties:
        meta:
          $ref: "#/components/schemas/MetaContent"
        response:
          $ref: "#/components/schemas/InfoResponseContent"
      description: |
        Respond with information regarding this Beacon.
    FilteringTermsResponse:
      required:
        - meta
        - response
      properties:
        meta:
          $ref: "#/components/schemas/MetaContent"
        response:
          $ref: "#/components/schemas/FilterTermsResponseContent"
    FilterTermsResponseContent:
      required:
        - filteringTerms
      properties:
        filteringTerms:
          $ref: "#/components/schemas/FilterTermsResponse"
        resources:
           $ref: "#/components/schemas/FilterTermsResourceResponse"
    FilterTermsResponse:
      type : array
      description: |
        List of filtering terms for querying this Beacon.
      required:
        - id
        - type
      items:
        type : object
        properties:
          id:
            type: string
            description: |
              The field id in the case of numeric or alphanumeric fields, or the term id in the case of ontology or custom terms. CURIE syntax in the case of an ontology term.
            example: ncit:C28421
          type:
            type: string
            description: |
              Either "custom", "alphanumeric" or ontology/terminology full name.
            example: alphanumeric or ontology or custom
          label:
            type: string
            description: |
              This would be the "preferred Label" in the case of an ontology term.
            example: Symptom Onset
    FilterTermsResourceResponse:
      type: array
      description: |
        Description of an ontology resource defined externally to this beacon implementation, such as MeSH or EFO, based on the phenopackets resource object (https://phenopacket-schema.readthedocs.io/en/latest/resource.html)
      items:
        type: object
        required:
          - id
        properties:
          id:
            type: string
            description: |
              Preferably OBO ID representing the resource; alternatively a URI pointing towards the definitions may be used if not in OBO.
          name:
            type: string
            description: |
              The name of the ontology referred to by the id element
          url:
            type: string
            description: |
              Uniform Resource Locator of the resource
            example: 'http://example.com/ontology'
          version:
            type: string
            description: |
              The version of the resource or ontology used to make the annotation
          nameSpacePrefix:
            type: string
            description: |
              The prefix used in the CURIE of an OntologyClass
          iriPrefix:
            type: string
            description: |
              The full Internationalized Resource Identifier (IRI) prefix
    Service:
      description: 'GA4GH service'
      type: object
      required:
        - id
        - name
        - type
        - organization
        - version
      properties:
        id:
          type: string
          description: 'Unique ID of this service. Reverse domain name notation is recommended, though not required. The identifier should attempt to be globally unique so it can be used in downstream aggregator services e.g. Service Registry.'
          example: 'org.ga4gh.myservice'
        name:
          type: string
          description: 'Name of this service. Should be human readable.'
          example: 'My project'
        type:
          $ref: '#/components/schemas/ServiceType'
        description:
          type: string
          description: 'Description of the service. Should be human readable and provide information about the service.'
          example: 'This service provides...'
        organization:
          type: object
          description: 'Organization providing the service'
          required:
            - name
            - url
          properties:
            name:
              type: string
              description: 'Name of the organization responsible for the service'
              example: 'My organization'
            url:
              type: string
              format: uri
              description: 'URL of the website of the organization (RFC 3986 format)'
              example: 'https://example.com'
        contactUrl:
          type: string
          format: uri
          description: 'URL of the contact for the provider of this service, e.g. a link to a contact form (RFC 3986 format), or an email (RFC 2368 format).'
          example: 'mailto:support@example.com'
        documentationUrl:
          type: string
          format: uri
          description: 'URL of the documentation of this service (RFC 3986 format). This should help someone learn how to use your service, including any specifics required to access data, e.g. authentication.'
          example: 'https://docs.myservice.example.com'
        createdAt:
          type: string
          format: date-time
          description: 'Timestamp describing when the service was first deployed and available (RFC 3339 format)'
          example: '2019-06-04T12:58:19Z'
        updatedAt:
          type: string
          format: date-time
          description: 'Timestamp describing when the service was last updated (RFC 3339 format)'
          example: '2019-06-04T12:58:19Z'
        environment:
          type: string
          description: 'Environment the service is running in. Use this to distinguish between production, development and testing/staging deployments. Suggested values are prod, test, dev, staging. However this is advised and not enforced.'
          example: 'test'
        version:
          type: string
          description: 'Version of the service being described. Semantic versioning is recommended, but other identifiers, such as dates or commit hashes, are also allowed. The version should be changed whenever the service is updated.'
          example: '1.0.0'
    ServiceType:
      description: 'Type of a GA4GH service'
      type: object
      required:
        - group
        - artifact
        - version
      properties:
        group:
          type: string
          description: 'Namespace in reverse domain name format. Use `org.ga4gh` for implementations compliant with official GA4GH specifications. For services with custom APIs not standardized by GA4GH, or implementations diverging from official GA4GH specifications, use a different namespace (e.g. your organization''s reverse domain name).'
          example: 'org.ga4gh'
        artifact:
          type: string
          description: 'Name of the API or GA4GH specification implemented. Official GA4GH types should be assigned as part of standards approval process. Custom artifacts are supported.'
          example: 'beacon'
        version:
          type: string
          description: 'Version of the API or specification. GA4GH specifications use semantic versioning.'
          example: '1.0.0'
    MapResponse:
      required:
        - meta
        - response
      properties:
        meta:
          $ref: "#/components/schemas/MetaContent"
        response:
          $ref: "#/components/schemas/MapResponseContent"
    MapResponseContent:
      description: |
        Returning the Beacon Map.
      required:
        - $schema
        - endpointSets
      properties:
        $schema:
          type : string
        endpointSets:
           $ref: "#/components/schemas/MapEndpointsSetsResponse"
    MapEndpointsSetsResponse:
      type: object
      description: |
        List of filtering terms for querying this Beacon.
      required:
        - entryType
        - rootUrl
      properties:
        entryType:
          type: string
          description: "Specifies the type of entries this Beacon handles."
        openAPIEndpointsDefinition:
          type: string
          description: |
            Reference to the file that includes the OpenAPI definition of the endpoints implemented in this Beacon instance. The referenced file MUST BE a valid OpenAPI definition file, as it is expected that the Beacon clients (e.g. a Beacon Network) should be able to parse it to discover additional details on the supported verbs, parameters, etc.
        rootUrl:
          type: string
          description: "The base URL for the Beacon endpoints."
        singleEntryUrl:
          type: string
          description: "URL to access a single entry in this Beacon."
        filteringTermsUrl:
          type: string
          description: "URL to access filtering terms supported by this Beacon."
        endpoints:
          type: object
          additionalProperties: 
            type: object
            required:
              - url
              - returnedEntryType
            properties:
              url:
                type: string
                description: "The URL of a specific endpoint."
              returnedEntryType:
                type: string
                description: "The type of entry returned by the endpoint."
    MaturityAttributesResponse:
      type: object
      description: |
       Declares the level of maturity of the Beacon instance.
      properties:
        productionStatus:
          type: string
    SecurityAttributesResponse:
      type: object
      properties:
        defaultGranularity:
          type: string
        securityLevels:
          type: array
          items:
            type: string
    ConfigurationEntryTypesResponse:
      type: object
      description: Returning the Beacon Entry Types.
      required:
        - id
        - name
        - ontologyTermForThisType
        - partOfSpecification
        - defaultSchema
      properties:
        $schema:
          type: string
        id:
          type: string
        name:
          type: string
        description:
          type: string
        ontologyTermForThisType:
          type: object
          required:
            - id
          properties:
            id:
              type: string
              description: "Unique identifier for the ontology term, preferably an OBO Foundry compliant ID."
            label:
              type: string
              description: "Human-readable label for the ontology term."
        partOfSpecification:
          type: string
        defaultSchema:
          type: object
          required:
              - referenceToSchemaDefinition
              - id
              - name
          properties:
              referenceToSchemaDefinition:
                type: string
              schemaVersion:
                type: string
              id:
                type: string
              name:
                type: string
              description:
                type: string  
        additionallySupportedSchemas:
          type: array
          items:
            type: object
            required:
              - referenceToSchemaDefinition
              - id
              - name
            properties:
              referenceToSchemaDefinition:
                type: string
              schemaVersion:
                type: string
              id:
                type: string
              name:
                type: string
              description:
                type: string
        aCollectionOf:
          type: string
        filteringTerms:
          type: string
        nonFilteredQueriesAllowed:
          type: boolean
    DefaultSchema:
      type : object
      required:
        - referenceToSchemaDefinition
        - id 
        - name
      items:
        type : object
        properties:
          referenceToSchemaDefinition:
            type: string
          schemaVersion:
            type: string
          id:
            type: string
          name:
            type: string
          description:
            type: string
    AdditionallySupportedSchemas:
      type : array
      required:
        - referenceToSchemaDefinition
        - id 
        - name
      items:
        type : object
        properties:
          referenceToSchemaDefinition:
            type: string
          schemaVersion:
            type: string
          id:
            type: string
          name:
            type: string
          description:
            type: string
    ConfigurationResponseContent:
      description: |
        Returning the Beacon Map.
      required:
        - $schema
        - maturityAttributes
        - entryTypes
      properties:
        $schema:
          type : string
        maturityAttributes:
           $ref: "#/components/schemas/MaturityAttributesResponse"
        securityAttributes:
           $ref: "#/components/schemas/SecurityAttributesResponse"
        entryTypes:
           $ref: "#/components/schemas/ConfigurationEntryTypesResponse"
    EntryTypesResponse:
      required:
        - meta
        - response
      type: object
      properties:
        meta:
          $ref: "#/components/schemas/MetaContent"
        response:
          $ref: "#/components/schemas/ETResponseContent"
      description: |
        Respond with the entry types available  in this Beacon Implementation.
    ConfigurationResponse:
      required:
        - meta
        - response
      type: object
      properties:
        meta:
          $ref: "#/components/schemas/MetaContent"
        response:
          $ref: "#/components/schemas/ConfigurationResponseContent"
      description: |
        Information about the Beacon. Aimed to Beacon clients like web pages or Beacon networks.
    MetaContent:
      description: |
        Information about the response that could be relevant for the Beacon client in order to interpret the results.
      required:
        - apiVersion
        - beaconId
        - returnedSchemas
      type: object
      properties:
        apiVersion:
          type: string
          description: |
            Version of the API.
          example: v2.0
        beaconId:
          type: string
          description: |
            Identifier of the beacon, as defined in Beacon, in reverse domain name notation.
          example: BeaconAPI.cv2.rdnexusdev.molgeniscloud.org
        returnedSchemas:
          type: array
          description: |
            Set of schemas used in the response to a request.
          items:
            type: object
            properties:
              entityType:
                type: string
              schema:
                type: string
    IndividualsMetaResponseContent:
      description: |
        Information about the response that could be relevant for the Beacon client in order to interpret the results.
      required:
        - apiVersion
        - beaconId
        - returnedGranularity
      type: object
      properties:
        apiVersion:
          type: string
          description: |
            Version of the API.
          example: v2.0
        beaconId:
          type: string
          description: |
            Identifier of the beacon, as defined in Beacon, in reverse domain name notation.
          example: BeaconAPI.cv2.rdnexusdev.molgeniscloud.org
        receivedRequestSummary:
          required:
            - apiVersion
            - requestedGranularity
            - requestedSchemas
          type: object
          description: |
            Section of the response that summarize the request with the following fields received as its been interpreted by the Beacon server. This could also just return the complete Beacon request made by the user.
          properties:
            apiVersion:
              type: string
            filters:
              type: object
              description: |
                Filters as submitted in the request.
              $ref: "#/components/schemas/IndividualRequestFilter"
            requestedGranularity:
              type: string
              example: boolean, count, aggregated, record
              default: count
            requestedSchemas:
              type: object
              description: |
                Set of schemas to be used in the response to a request.
              properties:
                entityType:
                  type: string
                schema:
                  type: string
        returnedGranularity:
          type: string
          example: boolean, count, aggregated, record
          default: count
        returnedSchemas:
          type: object
          description: |
            Set of schemas to be used in the response to a request.
          properties:
            entityType:
              type: string
            schema:
              type: string
    InfoResponseContent:
      description: |
        Metadata describing a Beacon instance.
      required:
        - apiVersion
        - environment
        - id
        - name
        - organisation
      properties:
        apiVersion:
          type: string
          description: |
            Version of the API provided by the Beacon.
          example: v2.0
        environment:
          type: string
          description: |
            Environment the service is running in. Use this to distinguish between production, development and testing/staging deployments. Allowed: prod, test, dev, staging
          example: dev
        id:
          type: string
          description: |
            Unique identifier of the Beacon. Use reverse domain name notation.
        name:
          type: string
          description: |
            Name of the Beacon.
        organisation:
          type: object
          description: |
            Organization owning the Beacon.
          required:
            - id
            - name
          properties:
            id:
              type: string
              description: |
                Unique identifier of the organization.
            name:
              type: string
              description: |
                Name of the organization.
        description:
          type: string
          description: |
            Description of the Beacon.
        version:
          type: string
          description: |
            TODO: This is a legacy use / duplication?
          example: v2.01
        welcomeUrl:
          type: string
          description: |
            URL to the welcome page for this Beacon (RFC 3986 format).
        alternativeUrl:
          type: string
          description: |
            Alternative URL to the API, e.g. a restricted version of this Beacon (RFC 3986 format).
        createDateTime:
          type: string
          description: |
            The date/time the Beacon was created (ISO 8601 format).
        updateDateTime:
          type: string
          description: |
           The time the Beacon was updated in (ISO 8601 format).
        info:
          type: object
          description: |
            Additional unspecified metadata about the Beacon service.
    ETResponseContent:
      required:
        - entryTypes
      type: object
      properties:
        entryTypes:
          required:
            - Individuals
          type: object
          description: |
            List of entry types.
          properties:
            Individuals:
              description: |
                Definition of an element or entry type including the Beacon v2 required and suggested attributes. This schema purpose is to describe each type of entities included in this beacon, hence Beacon clients could have some metadata about such entities.
              required:
                - defaultSchema
                - id
                - name
                - ontologyTermForThisType
                - partOfSpecification
              type: object
              properties:
                defaultSchema:
                  description: |
                    Definition of an annotated URL address or a file reference.
                  required:
                    - id
                    - name
                    - referenceToSchemaDefinition
                  properties:
                    id:
                      type: string
                      description: |
                        A (unique) identifier of the element.
                      example: Individuals
                    name:
                      type: string
                      description: |
                        A distinctive name for the element.
                      example: Individuals
                    referenceToSchemaDefinition:
                      type: string
                      description: |
                        Conforming Schema of the element.
                      example: https://raw.githubusercontent.com/ga4gh-beacon/beacon-v2-Models/main/BEACON-V2-draft4-Model/individuals/defaultSchema.json
                id:
                  description: |
                    A unique identifier of the element.
                  type: string
                  example: Individuals
                name:
                  description: |
                    A distinctive name for the element.
                  type: string
                  example: Individuals
                ontologyTermForThisType:
                  description: |
                    Definition of an ontology term.
                  type: object
                  required:
                    - id
                  properties:
                    id:
                      description: |
                        A CURIE identifier as `id` for ontology term.
                      example: ncit:C25190
                      type: string
                partOfSpecification:
                  description: |
                    This label is to group together entry types that are part of the same specification.
                  type: string
                  example: Beacon v2.0
      description: |
        Respond with a list of entry types conforming to Beacon v2 spec.
    IndividualResponse:
      description: |
        Response of a query over individuals counts.
      required:
        - meta
        - response
        - responseSummary
      type: object
      properties:
        meta:
          $ref: "#/components/schemas/IndividualsMetaResponseContent"
        response:
          required:
            - resultSets
          properties:
            resultSets:
              $ref: "#/components/schemas/IndividualsResults"
        responseSummary:
          $ref: "#/components/schemas/IndividualResponseContent"
        info:
          description: |
            Beacon only responds with this info object if there are any unsupported filters in the query.
          $ref: "#/components/schemas/WarningResponse"
    BiosampleResponse:
      description: |
        Response of a query over individuals counts.
      required:
        - meta
        - response
        - responseSummary
      type: object
      properties:
        meta:
          $ref: "#/components/schemas/IndividualsMetaResponseContent"
        response:
          required:
            - resultSets
          properties:
            resultSets:
              $ref: "#/components/schemas/IndividualsResults"
        responseSummary:
          $ref: "#/components/schemas/IndividualResponseContent"
        info:
          description: |
            Beacon only responds with this info object if there are any unsupported filters in the query.
          $ref: "#/components/schemas/WarningResponse"
    CatalogResponse:
      description: |
        Response of a query over records of catalogs.
      required:
        - meta
        - responseSummary
        - response
      type: object
      properties:
        meta:
          $ref: "#/components/schemas/CatalogsMetaResponseContent"
        responseSummary:
          $ref: "#/components/schemas/CatalogsResponseSummaryContent"
        response:
          $ref: "#/components/schemas/CatalogsResponseContent"
        info:
          description: |
            Beacon only responds with this info object if there are any unsupported filters in the query.
          $ref: "#/components/schemas/WarningResponse"
    CatalogsMetaResponseContent:
      description: |
        Information about the response that could be relevant for the Beacon client in order to interpret the results.
      required:
        - apiVersion
        - beaconId
        - returnedGranularity
      type: object
      properties:
        apiVersion:
          type: string
          description: |
            Version of the API.
          example: v2.0
        beaconId:
          type: string
          description: |
            Identifier of the beacon, as defined in Beacon, in reverse domain name notation.
          example: BeaconAPI.cv2.rdnexusdev.molgeniscloud.org
        receivedRequestSummary:
          required:
            - apiVersion
            - requestedGranularity
            - requestedSchemas
          type: object
          description: |
            Section of the response that summarize the request with the following fields received as its been interpreted by the Beacon server. This could also just return the complete Beacon request made by the user.
          properties:
            apiVersion:
              type: string
            filters:
              type: object
              description: |
                Filters as submitted in the request.
              $ref: "#/components/schemas/IndividualRequestFilter"
            requestedGranularity:
              type: string
              example: boolean, count, aggregated, record
              default: count
            requestedSchemas:
              type: object
              description: |
                Set of schemas to be used in the response to a request.
              properties:
                entityType:
                  type: string
                schema:
                  type: string
        returnedGranularity:
          type: string
          example: boolean, count, aggregated, record
          default: count
        returnedSchemas:
          type: object
          description: |
            Set of schemas used in the response to a request.
          properties:
            entityType:
              type: string
            schema:
              type: string
    WarningResponse:
      description: |
        When an implementation is responding with a partial query match, this section lets the requestor know if any filter(s)/value(s) are not applied to the query.
      required:
        - warnings
      type: object
      properties:
        warnings:
          required:
            - unsupportedFilters
          type: object
          properties:
            unsupportedFilters:
              type: array
              items:
                type: string
                description: |
                  In an array of strings, any filter(s) that are unsupported by an implementation go here.
                example: '"edam:data_2295"'
            unsupportedFilterValues:
              type: array
              items:
                type: string
                description: |
                  If an implementation does not support a filter value, let's say, for example, 'ncit:C124294'(Undetermined) Sex, this unsupported value goes here as a string, and will be ignored while a partial query is performed with other supported filter(s) from the request body (if any).
                example: '"ncit:C124294","ncit:C179980"'
          description: |
            Respond with a list of (comma-separated) unsupported filter(s).
          example: |
            {
            unsupportedFilters: ["ncit:C156420"], 

            unsupportedFilterValues:["ncit:C124294"]
            }
    IndividualResponseContent:
      required:
        - exists
        - numTotalResults
      type: object
      properties:
        exists:
          type: boolean
          description: |
            Indicator of whether any individual was observed in the
            data source for the given query with CDEs parameter. This should be non-null, unless there was an error, in which case `error` has to be non-null.
        numTotalResults:
          type: integer
          description: |
            Response of the query indicating if the query yield any results. If the query is successful then the count will be returned as a response.
    CatalogsResponseSummaryContent:
      required:
        - exists
        - numTotalResults
      type: object
      properties:
        exists:
          type: boolean
          description: |
            Indicator of whether any catalog was observed in the
            data source for the given query with CDEs filters. This should be non-null, unless there was an error, in which case `error` has to be non-null.
        numTotalResults:
          type: integer
      description: |
        Response of the query indicating if the query yield any results. If the query is successful then the count will be returned as a response.
    CatalogsResponseContent:
      required:
        - resultSets
      type: array
      items:
        $ref: "#/components/schemas/ResultsetsResponseContent"
    ResultsetsResponseContent:
      required:
        - id
        - setType
        - exists
        - resultsCount
        - results
      type: object
      properties:
        id:
          type: string
          description: |
            id of the resultset
          example: "catalogA0123"
        setType:
          type: string
          description: |
            Entry type of resultset. It SHOULD MATCH an entry type declared in the Beacon configuration.
          example: "catalog"
        exists:
          type: boolean
          description: |
            Indicator of whether any catalog was observed in the
            data source for the given query with CDEs filters. This should be non-null, unless there was an error, in which case `error` has to be non-null.
        resultsCount:
          type: integer
          description: |
            Number of results in this Resultset.
        results:
          description: |
            Array set of the records matching with the query.
          type: array
          items:
            anyOf:
              - $ref: "#/components/schemas/CatalogsResultsV0.2"
              - $ref: "#/components/schemas/CatalogsResultsV0.3"
        resultsHandover:
          description: |
            Handover to the resultant record page, if any.
    IndividualsResults:
      type: array
      items:
        type: object
        required:
          - id
          - type
          - exists
          - resultCount
        properties:
          id:
            type: string
            description: |
              id of the result
            example: "result0123"
          type:
            type: string
            description: |
              Type of result
            example: "Dataset"
          exists:
            type: boolean
            description: |
              Whether the results exists or not.
          resultCount:
            type: integer
            description: |
              Count of result, either exact or higher range of result. If employing ranges, 'info' attributre is required.
          info:
            required:
              - resultCountDescription
              - contactPoint
              - contactEmail
              - contactURL
              - countType
            type: object
            properties:
              resultCountDescription:
                required:
                  - minRange
                  - maxRange
                description: |
                  Contains minRange and maxRange of resultant set.
                type: object
                properties:
                  minRange:
                    type: integer
                    description: |
                      Value of minimum range employed.
                  maxRange:
                    type: integer
                    description: |
                      Value of maximum range employed.
              countType:
                type: string
                example : "VCF file"
              contactPoint:
                type: string
                description: |
                  Contact person for this resource.
              contactEmail:
                type: string
                description: |
                  Contact email for this resource.
              contactURL:
                type: string
                description: |
                  Contact URL for this resource.
    CatalogsResultsV0.2:
      required:
        - id
        - name
        - description
        - externalUrl
        - resourceTypes
        - organisation
      type: object
      properties:
        id:
          type: string
          description: |
            id of the result
          example: "catalogA0123"
        name:
          type: string
          description: |
            Name
          example: "catalog"
        description:
          type: string
          description: |
            Description of result.
        externalUrl:
          type: string
          description: |
            URL to reach result.
        resourceTypes:
          description: |
            Type of the resource.
          type: string
        organisation:
          description: |
            Organisation name/type.
          type: string
    CatalogsResultsV0.3:
      required:
        - "@context"
        - "@id"
        - "@type"
        - landingPage
        - title
      type: object
      properties:
        "@context":
          type: string
          format: url
          description: |
            the url of the json-ld's context with the definition of all the ontology terms used.
            It must be "https://raw.githubusercontent.com/ejp-rd-vp/query_builder_api/feat/beacon_version/versions/beacon/json-ld-contexts/resources-context.json",
        "@id":
          type: string
          description: |
            the IRI that identifies the Resource
        "@type":
          type: string
          description: the type of Resource. It must be one of allowed values
          enum:
            - "dcat:Dataset"
            - "ejprd:PatientRegistry"
            - "ejprd:Biobank"
            - "ejprd:Guideline"
        title:
          type: string
          description: the name of the resource
        description:
          type: string
          description: a description of the resource
        landingPage:
          type: string
          format: url
          description: the URL of the Resource in the original catalog
        theme:
          type: array
          description: an array with the orphacodes specifying the disease theme of the resource
          items:
            type: string
        personalData:
          type: string
          description: a boolean represente as a string (true or false) specifying whether the resource manage personal data or not
          enum:
            - "true"
            - "false"
        publisher:
          $ref: "#/components/schemas/Organization"
    Organization:
      type: object
      properties:
        "@type":
          type: string
          description: An ontology term specifying the type of organisation
          example: "foaf:Organization"
        "@id":
          type: string
          description: id of the Organization
        title:
          type: string
          description: name of the Organization
        description:
          type: string
          description: a description of the Organization
  securitySchemes:
    apiAuth:
      type: apiKey
      in: header
      name: auth-key